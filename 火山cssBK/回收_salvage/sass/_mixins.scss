@charset "UTF-8";

@import "mixins/mq";
@import "mixins/flex";
@import "mixins/grid";


// == 壓縮 mixin - 壓縮合併樣式(佔位符%)
// -----------------------------------------------------------------
$placeholders-selectors: () !default;

@mixin static($name, $extend: true) {
    $selector: map-get($placeholders-selectors, $name);

    @if $extend == true {
        @if $selector == null {
            $selector: unique-id();
            $placeholders-selectors: map-merge($placeholders-selectors, ($name: $selector)) !global;

            @at-root %#{$selector} {
                @include static($name, false) {
                    @content;
                }
            }
        }
        @at-root (without: media) {
            @extend %#{$selector};
        }
    }
    @else {
        @content;
    }
}

// == 插入偽類
// -----------------------------------------------------------------
// 用法:
// 1 @include el => div:before, div:after { content:""; display:block; }
// 2 @include el(before, '111', false) => div:before { content:"111"; }
// $ext: false 時，不會將程式壓縮起來 (src: _placeholders.scss)
//
@mixin el($pseudo: all, $display: block, $content: '', $exd: true) {
    $selector: if($pseudo == 'all', '&::before,&::after', '&::#{$pseudo}');

    #{$selector} {
        // content 是否要有值
        @if $display == block and $content == '' {
            @include static(pseud, $exd) {
                content: '';
                display: block;
            }
        }
        @else {
            @if $content { content: quote($content); }
            @if $display { display: $display; }
        }

        @content;
    }
}

// == 清除浮動
// -----------------------------------------------------------------
@mixin clearfix($exd:true) {
    @include static(clearfix, $exd) {
        &::after {
            display: table;
            content: '';
            clear: both;
        }
    }
}

// == container(set width)
// -----------------------------------------------------------------
@mixin container($max-width: $max-width, $gap: $gutter, $exd: true) {
    max-width: $max-width;

    @include clearfix($exd);

    @include static(mx-a, $exd);

    @if $gap {
        @include static(gap, $exd) {
            @include mq-max($max-width + ($gap*2)) {
                padding-right: $gap;
                padding-left: $gap;
            }
        }
    }
}

// == 文字類
// -----------------------------------------------------------------

// 隱藏文字
@mixin text-hide($exd:true) {
    @include static(texthide, $exd) {
        text-indent: 101%;
        overflow: hidden;
        white-space: nowrap;
        padding: 0;
    }
}

// 文字溢位出現省略號,要設寬度
@mixin text-overflow($width:100%, $exd:true) {
    @include static('text-overflow', $exd) {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    @if $width { width: $width; }
}

// 底色太淺就自動設文字色(符合對比度)
@mixin a11y($fg, $bg, $radio: 4.5) {
    @if contrast($fg, $bg) < $radio {
        color: a11ycolor($fg, $bg);
    }
}

// == 置中
// -----------------------------------------------------------------
// 用法:
// 水平-@include center(x) => transform: translateX(-50%);
// 垂直-@include center(y) => transform: translateY(-50%);
//
// @include center(500px) => margin-left: -250px
// @include center(null, 300px) => margin-top: -150px

@mixin center($main: null, $cross: null) {
    position: absolute;

    // 2者置中
    @if not $main and not $cross {
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
    }
    @else if $main {
        // 垂直置中
        @if $main == y {
            top: 50%;
            transform: translateY(-50%);
        }
        // 水平置中
        @else {
            left: 50%;

            @if type-of($main) == number {
                width: $main;
                margin-left: -(round($main * .5));
            }
            @else {
                transform: translateX(-50%);
            }
        }
    }
    // 垂直置中(數字)
    @if type-of($cross) == number {
        top: 50%;
        height: $cross;
        margin-top: -(round($cross * .5));
    }
}

// == 按鈕
// -----------------------------------------------------------------
@mixin btn($effect: $transition-duration, $exd: false) {
    @include static(btn, $exd) {
        // common
        display: inline-block;
        text-align: center;
        vertical-align: middle;
        user-select: none;
        white-space: nowrap;
        transition: if(type-of($effect) == string, unquote($effect), $effect);
        -webkit-appearance: none;

        &:focus {
            outline: 0;
        }
    }

    // &:disabled <a> 不可用 => 改 &[disabled]
    &[disabled] {
        cursor: $cursor-disabled;

        @content;
    }
}


// == 動畫
// -----------------------------------------------------------------
@mixin keyframes($name) {
    @each $pre in (webkit, moz) { // webkit, moz, ms, o
        @-#{$pre}-keyframes #{$name} { @content; }
    }
    @keyframes #{$name} { @content; }
}

// 使用方法
// @include animate(fadein 1s 1 forwards) {
//   0%   { opacity: 0; }
//   100% { opacity: 1; }
// }
// 名稱 動畫時間 動畫方式 延遲時間 次數 方向 結束狀態 啟動停止
// animation: name duration timing-function delay iteration-count direction fill-mode play-state;
// animation: example 5s linear 2s infinite alternate;
// animation: mymove 5s infinite;
@mixin animate($animate) {
    animation: $animate;

    @include keyframes(nth($animate, 1)) {
        @content;
    }
}