@charset "UTF-8";
@use 'sass:math';
@use 'sass:map';
@use 'sass:string';


// == base
// -----------------------------------------------------------------
// ## 去單位
@function stripunit($value) {
    @return math.div($value, ($value * 0 + 1));
}

// ## 四捨五入幾位數
// _decimal.scss | MIT License | gist.github.com/terkel/4373420
// @example
//     decimal(0.333)    => 0
//     decimal(0.333, 1) => 0.3
//     decimal(0.333, 2) => 0.33
//     decimal(0.666)    => 1
//     decimal(0.666, 1) => 0.7
//     decimal(0.666, 2) => 0.67

@function decimal($number, $digits: 0, $mode: round) {
    $n: 1;

    // $number must be a number
    @if type-of($number) != number { @return $number; }

    // $digits must be a unitless number
    @if type-of($digits) != number { @return $number; }
    @else if not unitless($digits) { @return $number; }

    @if $digits > 0 {
        @for $i from 1 through $digits {
            $n: $n * 10;
        }
    }

    @if $mode == round      { @return math.div(round($number * $n), $n); } // 四捨五入
    @else if $mode == ceil  { @return math.div(ceil($number * $n), $n); }  // 無條件進位
    @else if $mode == floor { @return math.div(floor($number * $n), $n); } // 無條捨去
    @else                   { @return $number; }
}


// == px to other
// -----------------------------------------------------------------
@function em($value, $fontbase: $font-size-base, $decimal: 2) {
    @if type-of($value) != 'number' {
        @error $value;
    }
    @else if unit($value) == px or unitless($value) {
        $value: math.div(stripunit($value), stripunit($fontbase)) * 1em;
    }
    @return if($decimal, decimal($value, $decimal), $value);
}

// to rem
@function torem($value, $decimal: 2) {
    @if unit($value) == px or unitless($value) {
        @if $value < 7 and $value > -7 {
            @return if(unitless($value), $value * 1px, $value);
        }

        $size: math.div( stripunit($value), stripunit($font-size-base) );
        $value: if($decimal, decimal($size, $decimal), $size) * 1rem;
    }

    @return if($value == 0rem, 0, $value);
}


// == string 相關
// -----------------------------------------------------------------
// ## 取代變數 @author Hugo Giraudel src: https://css-tricks.com/snippets/sass/str-replace-function/
// 使用方法:
//   $string: '#{$input-placeholder-color}';
//   content: str-replace($string, "#", "%23");
@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

@function escape-svg($string) {
    @each $char, $encoded in (
        ("<", "%3C"),
        (">", "%3E"),
        ("#", "%23"),
        // ("(", "%28"),
        // (")", "%29"),
    ) {
        $string: str-replace($string, $char, $encoded);
    }

    @return 'url("data:image/svg+xml,' + $string + '")';
}


// == map
// -----------------------------------------------------------------
// get('heading.font.weight', $config)
@function get($key, $map: $config) {
    $keys: string.split($key, '.');
    @return map.get($map, $keys...);
}


// == 顏色
// -----------------------------------------------------------------
// A list of pre-calculated numbers of pow(divide((divide($value, 255) + .055), 1.055), 2.4). (from 0 to 255)
// stylelint-disable-next-line scss/dollar-variable-default, scss/dollar-variable-pattern
$_luminance-list: .0008 .001 .0011 .0013 .0015 .0017 .002 .0022 .0025 .0027 .003 .0033 .0037 .004 .0044 .0048 .0052 .0056 .006 .0065 .007 .0075 .008 .0086 .0091 .0097 .0103 .011 .0116 .0123 .013 .0137 .0144 .0152 .016 .0168 .0176 .0185 .0194 .0203 .0212 .0222 .0232 .0242 .0252 .0262 .0273 .0284 .0296 .0307 .0319 .0331 .0343 .0356 .0369 .0382 .0395 .0409 .0423 .0437 .0452 .0467 .0482 .0497 .0513 .0529 .0545 .0561 .0578 .0595 .0612 .063 .0648 .0666 .0685 .0704 .0723 .0742 .0762 .0782 .0802 .0823 .0844 .0865 .0887 .0908 .0931 .0953 .0976 .0999 .1022 .1046 .107 .1095 .1119 .1144 .117 .1195 .1221 .1248 .1274 .1301 .1329 .1356 .1384 .1413 .1441 .147 .15 .1529 .1559 .159 .162 .1651 .1683 .1714 .1746 .1779 .1812 .1845 .1878 .1912 .1946 .1981 .2016 .2051 .2086 .2122 .2159 .2195 .2232 .227 .2307 .2346 .2384 .2423 .2462 .2502 .2542 .2582 .2623 .2664 .2705 .2747 .2789 .2831 .2874 .2918 .2961 .3005 .305 .3095 .314 .3185 .3231 .3278 .3325 .3372 .3419 .3467 .3515 .3564 .3613 .3663 .3712 .3763 .3813 .3864 .3916 .3968 .402 .4072 .4125 .4179 .4233 .4287 .4342 .4397 .4452 .4508 .4564 .4621 .4678 .4735 .4793 .4851 .491 .4969 .5029 .5089 .5149 .521 .5271 .5333 .5395 .5457 .552 .5583 .5647 .5711 .5776 .5841 .5906 .5972 .6038 .6105 .6172 .624 .6308 .6376 .6445 .6514 .6584 .6654 .6724 .6795 .6867 .6939 .7011 .7084 .7157 .7231 .7305 .7379 .7454 .7529 .7605 .7682 .7758 .7835 .7913 .7991 .807 .8148 .8228 .8308 .8388 .8469 .855 .8632 .8714 .8796 .8879 .8963 .9047 .9131 .9216 .9301 .9387 .9473 .956 .9647 .9734 .9823 .9911 1;

// # 取顏色的亮度
// Return WCAG2.1 relative luminance
// See https://www.w3.org/TR/WCAG/#dfn-relative-luminance
// See https://www.w3.org/TR/WCAG/#dfn-contrast-ratio
// luminance(#fff) => 1
// luminance(#000) => 0
@function luminance($color) {
    $rgb: (
        "r": red($color),
        "g": green($color),
        "b": blue($color)
    );

    @each $name, $value in $rgb {
        $value: if(math.div($value, 255) < .04045, math.div(math.div($value, 255), 12.92), nth($_luminance-list, $value + 1));
        $rgb: map-merge($rgb, ($name: $value));
    }

    @return (map-get($rgb, "r") * 0.2126) + (map-get($rgb, "g") * 0.7152) + (map-get($rgb, "b") * 0.0722);
}

// 算顏色對比值, w3c建議對比為 4.5 以上
// contrast-ratio(#fff, #879B41) => 3.09
@function contrast-ratio($color1, $color2: #fff) {
    $l1: luminance($color1) + 0.05;
    $l2: luminance($color2) + 0.05;
    $ratio: math.div($l2, $l1);

    @return if( $l1 > $l2, math.div(1, $ratio), math.div(round($ratio * 100), 100) );
}

// 反轉色
// [ref] https://github.com/alex-page/sass-a11ycolor/blob/main/src/020-a11ycolor.scss
// or https://css-tricks.com/programming-sass-to-create-accessible-color-combinations/
@function a11y($primary, $secondary, $ratioKey:'small') {
    $ratios: (
        'large': 3,
        'small': 4.5
    );

    $ratio: map-get($ratios, $ratioKey);
    $primary-lightness: lightness($primary);

    // 對比度夠就直接回傳原色
    @if contrast-ratio($primary, $secondary) >= $ratio {
        @return $primary;
    }

    // 對比度不夠則找出相近色
    // 背景色的明暗判斷
    $bg-is-dark: contrast-ratio($secondary, #000) >= $ratio;  // true or flase
    $bg-is-light: contrast-ratio($secondary, #fff) >= $ratio; // true or flase

    // 初始亮度邊界
    $mid-hex: math.div(100, 255); // 255 color / 100% HSL
    $min-lightness: 0;
    $max-lightness: 100;
    $is-dark: false;

    @if $bg-is-dark and $bg-is-light {
        // 背景對比度足夠時，依據 $primary-lightness 決定調整方向
        @if ($primary-lightness >= 50) {
            $min-lightness: $primary-lightness;
        } @else {
            $max-lightness: $primary-lightness;
            $is-dark: true;
        }
    } @else if $bg-is-dark {
        // 黑底背景時，降低亮度
        $max-lightness: $primary-lightness;
        $is-dark: true;
    } @else {
        // 非黑底（白底）時，提升亮度
        $min-lightness: $primary-lightness;
    }

    // 找出對比度足夠的顏色
    $return-color: null;

    @while ($return-color == null) {
        $mid-lightness: ($min-lightness + $max-lightness) * 0.5;
        $mid-color: hsl(hue($primary), saturation($primary), $mid-lightness);
        $new-color: mix($mid-color, $mid-color);

        @if contrast-ratio($new-color, $secondary) >= $ratio {
            @if $max-lightness - $min-lightness < $mid-hex { // 255 color / 100% HSL
                $return-color: $new-color;
            }
            @if $is-dark {
                $min-lightness: $mid-lightness;
            } @else {
                $max-lightness: $mid-lightness;
            }
        }
        @else if $is-dark {
            $max-lightness: $mid-lightness;
        }
        @else {
            $min-lightness: $mid-lightness;
        }
    }

    @return $return-color;
}

// 取得組合色
@function color($value: "primary", $map: $colors) {
    @return if(map-has-key($map, $value), map-get($map, $value), null);
}

// 漸淡色 => color: light(#BADA55, 42%);
@function light($color, $percentage) {
    $percentage: if(unitless($percentage), $percentage * 1%, $percentage);
    @return mix(white, $color, $percentage);
}

// 漸濃色 => background-color: dark(#663399, 42%);
@function dark($color, $percentage) {
    $percentage: if(unitless($percentage), $percentage * 1%, $percentage);
    @return mix(black, $color, $percentage);
}


// == misc
// -----------------------------------------------------------------

// height => padding-y
@function pdy($height, $fontsize: $font-size-base, $lineheight: $line-height-base) {
    $val: ($height - ($fontsize * $lineheight));
    @return em($val, $fontsize) * 0.5;
}

// z-index
@function z($name) {
    $index: index($zindex, $name);
    @return $index;
}