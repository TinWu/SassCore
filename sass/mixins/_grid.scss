@use 'sass:math';

// == grid
// -----------------------------------------------------------------
// 使用方法 四捨五入: decimal($number, 2) in function
// (1 / 12 * 100%) - (1.6 * 12)
// width: grid(1, 12, 1.6); => width: 6.86%;
@function grid($size, $columns, $gap: null) {
    $width: decimal(math.div($size, $columns) * 100%, 2);

    // if $gap 有值
    @if $gap {
        $width: if(unitless($gap), $width - $gap, calc($width - $gap));
    }

    @return $width;
}

@mixin make-grid-columns($columns, $breaks: $breakpoints) {

    .row {
        // for flex
        display: flex;
        flex-wrap: wrap;
    }

    // 占用剩下的所有空間
    .col {
        flex: 1 1 0%;
        max-width: 100%;
    }

    %columns {
        flex: 0 0 auto;
    }

    @for $i from 1 through $columns {
        .col-#{$i} {
            @extend %columns;

            width: grid($i, $columns);
        }
    }

    @each $breakpoint, $value in $breaks {

        @include mq($value) {
            .#{$breakpoint}\: {
                &flex {
                    display: flex;
                    @include modifiers(get('flexs.size'), 'flex');
                }

                // 不縮小
                &shrink-0 {
                    flex-shrink: 0;
                }

                // @each $cols in (2, 3, 4, 5) { => 2, 3, 4 在12格都有
                @each $cols in (5) {
                    @for $i from 1 through $cols {

                        @if $i < $cols {
                            // .sm:basis-1/2 => flex-basis: 1/2
                            &basis-#{$i}\/#{$cols} {
                                flex-basis: grid($i, $cols);
                            }

                            // .sm:width-4/5 => width: 4/5
                            &w-#{$i}\/#{$cols} {
                                width: grid($i, $cols);
                            }
                        }
                    }
                }

                // # space
                // spacing => md:m-0
                @each $abbrev, $prop in (m: margin, p: padding) {
                    @each $size, $length in get('spacing') {
                        &#{$abbrev}-#{$size} { #{$prop}: $length; }

                        @each $infix, $property in get('utils.spacers') {
                            &#{$abbrev}#{$infix}-#{$size} {
                                #{$prop}-#{$property}: $length;

                                @if $infix == x { #{$prop}-right: $length; }
                                @if $infix == y { #{$prop}-bottom: $length; }
                            }
                        }
                    }
                }

                // .space-x-0 > :not([hidden]) ~ :not([hidden]) => margin-left: 0px
                @each $prefix, $property in (x: left, y: top) {
                    @each $size, $length in get(spacing) {
                        &space-#{$prefix}-#{$size} > :not([hidden]) ~ :not([hidden]) {
                            margin-#{$property}: rem($length);
                        }
                    }
                }

                &row {
                    display: flex;
                    flex-wrap: wrap;
                }

                &flex-col {
                    flex-direction: column;
                }

                &col {
                    flex: 1 1 0%;
                    max-width: 100%;
                }

                &col-auto {
                    width: auto;
                }

                $cols: ();
                // .sm:col-1 => width: 1/12
                @for $i from 1 through $columns {
                    $cols: $cols, '&col-#{$i}';

                    &col-#{$i} {
                        // @include row-cols($i);
                        width: grid($i, $columns);
                    }
                }

                &col-auto,
                #{$cols} {
                    flex: 0 0 auto;
                }
            }
        }
    }
}

@mixin make-cssgrid($columns, $gap, $breaks: $breakpoints) {
    .grid {
        display: grid;
    }

    // 一排幾個
    @for $i from 1 through $columns {
        .grid-cols-#{$i} {
            grid-template-columns: repeat($i, minmax(0, 1fr));
        }
    }

    // 間距
    @each $class, $value in $gap {
        .gap-#{$class} {
            gap: rem($value);
        }
        .gap-x-#{$class} {
            column-gap: rem($value);
        }
        .gap-y-#{$class} {
            row-gap: rem($value);
        }
    }

    @each $breakpoint, $value in $breaks {

        @include mq($value) {
            .#{$breakpoint}\: {
                &grid {
                    display: grid;
                }

                @for $i from 1 through $columns {
                    &grid-cols-#{$i} {
                        grid-template-columns: repeat($i, minmax(0, 1fr));
                    }
                }

                @each $class, $value in $gap {
                    &gap-#{$class} {
                        gap: rem($value);
                    }

                    &gap-x-#{$class} {
                        column-gap: rem($value);
                    }

                    &gap-y-#{$class} {
                        row-gap: rem($value);
                    }
                }
            }
        }
    }
}