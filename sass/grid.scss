grid@charset "UTF-8";
@use 'sass:math';

$flexs: (
    // 母元素
    'flex': (
        'wrap':     wrap,    // 子元素換行
        'nowrap':   nowrap,  // 子元素不換行
    ),

    // 主軸(水平)
    // justify-content: flex-start|flex-end|center|space-between|space-around|initial|inherit
    'justify': (
        'start':    flex-start,
        'end':      flex-end,
        'center':   center,
        'between':  space-between,
        'evenly':   space-evenly,
    ),

    // 副軸(垂直)
    // align-items: stretch|center|flex-start|flex-end|baseline|initial|inherit
    'items': (
        'start':    flex-start,
        'end':      flex-end,
        'center':   center,
        'stretch':  stretch,
    ),

    // 子元素對齊
    'self': (
        'start':    flex-start,
        'center':   center,
    ),

    // 子元素尺寸
    'size': (
        '1':        1 1 0%,  // 占滿剩餘空間
        'auto':     1 1 auto,
        'none':     none,
    ),
);

$config: (
    'spacing': (
        '0\\.5':    2px,    // $spacer * 0.125,
        '2\\.5':    10px,   // $spacer * 0.625,
        '16':       64px,   // $spacer * 4,
        '24':       96px,   // $spacer * 6,
        '32':       128px,  // $spacer * 8,
    ),
);

@import "function";  // 常用函數
@import "variables"; // 預設變數
@import "mixins";    // 預寫css


// == output
// ------------------------------------------------------------

// ## flex
// 彈性元素: 寬度預設100%

.flex {
    display: flex;

    // flex-wrap, flex-1, flex-auto
    @include modifiers(get(flex, $flexs), 'flex-wrap');
    @include modifiers(get(size, $flexs), 'flex');
}

.flex-inline {
    display: inline-flex;
}

.flex-col {
    flex-direction: column;
}

// 垂直
.items {
    @include modifiers(get(items, $flexs), 'align-items');
}

// 水平
.justify {
    @include modifiers(get(justify, $flexs), 'justify-content');
}

// 子元素對齊
.self {
    @include modifiers(get(self, $flexs), 'align-self');
}

// 子元素尺寸
// flex: flex-grow flex-shrink flex-basis     => flex: 0 1 auto;[預設值]
// # flex-grow   依照設定比例分配剩餘空間        => 0:不縮放[預設]，1:剩下空間為1份
// # flex-shrink 表示空間不夠時的壓縮比例        => 0:不壓縮，1:比例一樣[預設]
// # flex-basis  分配到的空間 可使用不同的單位值  => auto:預設空間[預設], 0要設0%
//
.grow         { flex-grow: 1; }     // 占其他空間
.grow-0       { flex-grow: 0; }     // 不占其他空間
.shrink       { flex-shrink: 1; }   // 壓縮比例一樣
.shrink-0     { flex-shrink: 0; }   // 不縮小
.basis-0      { flex-basis: 0%; }   // 用內容尺寸
.basis-full   { flex-basis: 100%; } // 全空間

// # basis-1/5 basis-4/5
// @each $cols in (2, 3, 4, 5) { => 2, 3, 4 在12格都有
@each $cols in (5) {
    @for $i from 1 through $cols {

        @if $i < $cols {
            .basis-#{$i}\/#{$cols} {
                flex-basis: grid($i, $cols);
            }

            .w-#{$i}\/#{$cols} {
                width: grid($i, $cols);
            }
        }
    }
}

// # mt-0, p-5
// src: https://gist.github.com/MatthewRDodds/8f171914ee6b826db29393f33229d509
@each $abbrev, $prop in (m: margin, p: padding) {
    @each $size, $length in get('spacing') {
        .#{$abbrev}-#{$size} {
            #{$prop}: $length;
        }

        @each $infix, $property in get('utils.spacers') {
            .#{$abbrev}#{$infix}-#{$size} {
                #{$prop}-#{$property}: $length;

                @if $infix == x { #{$prop}-right: $length; }
                @if $infix == y { #{$prop}-bottom: $length; }
            }
        }
    }

    @if $abbrev == m {
        .#{$abbrev}-auto {
            #{$prop}: auto;
        }

        @each $infix, $property in get('utils.spacers') {
            .#{$abbrev}#{$infix}-auto {
                #{$prop}-#{$property}: auto;

                @if $infix == x { #{$prop}-right: auto; }
                @if $infix == y { #{$prop}-bottom: auto; }
            }
        }
    }
}

// # space-x-1 space-y-1
@each $prefix, $property in (x: left, y: top) {
    @each $size, $length in get(spacing) {
        .space-#{$prefix}-#{$size} > :not([hidden]) ~ :not([hidden]) {
            margin-#{$property}: torem($length);
        }
    }
}

// # row-col (2024 upt flex-basis)
@include make-grid-columns;


// # grid(5欄, space) *index要6
// => grid grid-cols-3 gap-4
@include make-cssgrid(
    6,
    (
        '1':  0.25rem,      // 4px
        '2':  0.5rem,       // 8px
        // '3':  0.75rem,   // 12px
        '4':  1rem,         // 16px
        '5':  1.25rem,      // 20px
        // '6':  1.5rem,    // 24px
        '8':  2rem,         // 32px
        '12': 3rem,      // 48px
        '16': 4rem,         // 64px
    )
);

@each $i in (1, 2, 3, 5) {
    .col-span-#{$i} {
        grid-column: span 1 / span $i;
    }
}

.xl\:grid-cols-5 {
    @include mq($wide) {
        grid-template-columns: repeat(5, minmax(0, 1fr));
    }
}

.auto-cols {
    @include modifiers(
        (
            auto: auto,
            min:  min-content,
            max:  max-content,
            fr:   minmax(0, 1fr),
        ),
        'grid-auto-columns'
    );
}